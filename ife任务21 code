<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>js ife任务21 3.0</title>
	<style type="text/css">
	*{
		font-family: "Microsoft Yahei";
	}
	#tag-result{
		line-height: 80px;
	}
	#tag-result div{
		display: inline-block;
		line-height: 30px;
		vertical-align: middle;
		margin-left: 5px;
		padding: 6px;
		background-color: #8CCAFB;
		color: #fff;
		cursor: default;
	}
	#hobby-result{
		margin-top: 30px;
	}
	#hobby-result div{
		display: inline-block;
		line-height: 30px;
		vertical-align: middle;
		margin-left: 5px;
		padding: 6px;
		background-color: #8CCAFB;
		color: #fff;
		cursor: default;
	}
	#tag-result div:hover:before,#hobby-result div:hover:before{
		content: "点击删除";
	}
	#hobby-input{
		vertical-align: text-top;
	}
	#tag-input{
		vertical-align: middle;
	}
	</style>
</head>
<body>
	<p>Tap:<input type="text" name="" id="tag-input">按回车或逗号提交</p>
	<div id="tag-result"></div>
	<p class="wrap-hobby-input">兴趣爱好<textarea id="hobby-input"></textarea></p>
	<input type="button" id="send-hobby" value="添加兴趣爱好">
	<div id="hobby-result"></div>



	<script type="text/javascript">
		//创建父类
		function SuperType(eventElem,max_limit,showElem){
			this.eventElem = eventElem;//获取触发事件的元素
			this.max_limit = max_limit;//获取标签数量的最大限制
			this.showElem = showElem;//获取显示标签的元素载体
			this.dataArr = [];//新建一个数据数组
			this.tagValue = "";//新建一个获取事件传值的变量
		}

		SuperType.prototype = {
			//重新赋值构造属性
			constructor : SuperType,

			filter : function(){
				var that = this;
				//先判断传入的值是什么类型
				if (typeof this.tagValue == "string") {
					if (this.dataArr.length != 0) {
						//如果数据数组不为空做判断
						if (this.dataArr.indexOf(this.tagValue) == -1) {
							//如果当前输入结果不存在添加到数组
							this.dataArr.push(this.tagValue);
						}
					}else{
						this.dataArr.push(this.tagValue);
					}
				}else if(typeof this.tagValue == "object" && this.tagValue instanceof Array){
					//如果传入的值是数组则通过遍历去除重复值
					(function(){
						for (var i = 0; i < that.tagValue.length; i++) {
							if(that.dataArr.indexOf(that.tagValue[i]) == -1){
								//如果此时value某元素不存在数据数组中添加
								that.dataArr.push(that.tagValue[i]);
							}else{
								//否则跳过本次循环
								continue;
							}
						}
					})();
				}
			},

			ctrlAmount : function(){
				var len = this.dataArr.length;
				if (len > this.max_limit) {
					this.dataArr.splice(0,len - this.max_limit);
				}
			},

			outPutTags : function(){
				var fragment = document.createDocumentFragment();
				var that = this;
				(function(){
					for (var i = 0; i < that.dataArr.length; i++) {
						var div = document.createElement("div");
						div.innerText = that.dataArr[i];
						fragment.appendChild(div);
					}
				})();
				this.showElem.innerHTML = "";
				this.showElem.appendChild(fragment);
			},

			setTagUi : function(){
				var allTags = this.showElem.querySelectorAll("div");
				(function(){
					for (var i = 0; i < allTags.length; i++) {
						allTags[i].addEventListener("mouseenter",function(){
							this.style.backgroundColor = "red";
						});

						allTags[i].addEventListener("mouseleave",function(){
							this.style.backgroundColor = "";
						})
					}
				})();
			},

			setDeleteEvent : function(){
				var allTags = this.showElem.querySelectorAll("div");
				var that = this;
				(function(){
					for (var i = 0; i < allTags.length; i++) {
						allTags[i].addEventListener("click",function(){
							var curTags = that.showElem.querySelectorAll("div");
							for (var k = 0; k < curTags.length; k++) {
								if (this.innerText == curTags[k].innerText) {
									var parent = this.parentNode;
									parent.removeChild(parent.childNodes[k]);
									that.dataArr.splice(k,1);
								}
							}
						},false);
					}
				})();
			}
		};


		//建立标签子类
		function SubTag(eventElem,max_limit,showElem){
			SuperType.call(this,eventElem,max_limit,showElem);
		}

		SubTag.prototype = new SuperType();
		SubTag.prototype.constructor = SubTag;

		//定义标签子类事件方法
		SubTag.prototype.setKeyEvent = function(){
			var that = this;
			var reg = /(^\s*)|(\s*$)/;
			this.eventElem.addEventListener("keyup",function(event){
				var lastChar = this.value[this.value.length - 1];
				if (event.keyCode == 13 && (this.value != "" || !reg.test(this.value))) {
					var curVal = this.value.trim();
					that.tagValue = curVal;
					that.filter();
					that.ctrlAmount();
					that.outPutTags();
					that.setTagUi();
					that.setDeleteEvent();
					this.value = "";
				}else if((lastChar == "," || lastChar == "，") && this.value.length > 1){
					curVal = this.value.substring(0,this.value.length - 1);
					that.tagValue = curVal;
					that.filter();
					that.ctrlAmount();
					that.outPutTags();
					that.setTagUi();
					that.setDeleteEvent();
					this.value = "";
				}

			},false);
			this.eventElem = null;
		}

		//定义标签子类初始化方法
		SubTag.prototype.tagRander = function(){
			this.setKeyEvent();
		}


		//定义hobby子类
		function SubHobby(eventElem,max_limit,showElem,contentElem,reg){
			SuperType.call(this,eventElem,max_limit,showElem);
			this.rule = reg;//获取正则表达式
			this.contentElem = contentElem;//获取内容框内容
		}
		SubHobby.prototype = new SuperType();

		//定义兴趣爱好按钮点击事件
		SubHobby.prototype.setClickEvent = function(){
			var that = this;
			this.eventElem.addEventListener("click",function(){
				that.tagValue = that.contentElem.value.trim();//将内容框内容赋值给 tagValue
				that.tagValue = that.tagValue.split(that.rule);//调用规则变成数组
				that.filter();
				that.ctrlAmount();
				that.outPutTags();
				that.setTagUi();
				that.setDeleteEvent();
				that.contentElem.value = "";
			},false);
			this.eventElem = null;
		}

		SubHobby.prototype.hobbyRander = function(){
			this.setClickEvent();
		}




		//执行对象
		var tagInput = document.querySelector("#tag-input");
		var tagShow = document.querySelector("#tag-result");
		var hobbyInput = document.querySelector("#hobby-input");
		var hobbyBt = document.querySelector("#send-hobby");
		var hobbyShow = document.querySelector("#hobby-result");
		var reg = /[\n\t,，;；:；]/;

		var tagsub = new SubTag(tagInput,10,tagShow);
		tagsub.tagRander();

		var hobbysub = new SubHobby(hobbyBt,10,hobbyShow,hobbyInput,reg); 
		hobbysub.hobbyRander();

	</script>
</body>
</html>
